knitr::opts_chunk$set(echo = TRUE)
iris
names(iris.data)
iris.data = iris
names(iris.data)
colnames(iris)
plot(iris[,1:4])
help(iris)
head(iris)
str(iris)
plot( iris[,1:4],col=c(2,3,4)[iris$Species], main='Iris data' )
# compute eigenvalues and eigenvectors of the covariance matrix
# this is the covariance matrix of the data
cov(iris[,1:4])
mean(iris[,1])
mean(iris[,2])
# eigenvalues and eigenvectors of the covariance matrix
projections = eigen(cov(iris[,1:4]))
projections
#eigenvectors
G = projections$vectors
#eigenvalues
lambda = projections$values
# compute eigenvalues and eigenvectors of the covariance matrix
# this is the covariance matrix of the data
cov(iris[,1:4])
iris[,1:4] %*% G
iris[,1:4]
dim(iris[,1:4])
dim(G)
lambda
as.matrix(iris[,1:4]) %*% G
var(PCs[,1])
PCs = as.matrix(iris[,1:4]) %*% G
var(PCs[,1])
var(PCs[,1])
var(PCs[,2])
var(PCs[,3])
var(PCs[,4])
lambda
mean(PCs[,1])
X = as.matrix(iris[,1:4])
colmeans(X)
colMeans(X)
rep(1,dim(X)[1])
rep(1,dim(X)[1]) %*% colMeans9X
rep(1,dim(X)[1]) %*% colMeans(X)
as.vector(rep(1,dim(X)[1])) %*% colMeans(X)
as.matrix(rep(1,dim(X)[1]),dim(X)[1],1) %*% colMeans(X)
Xc = X - as.matrix(rep(1,dim(X)[1]),dim(X)[1],1) %*% colMeans(X)
Xc
# construct the design matrix
X = as.matrix(iris[,1:4])
# center the columns: 1_n %*% colMeans(X) []
Xc = X - as.matrix(rep(1,dim(X)[1]),dim(X)[1],1) %*% colMeans(X)
# compute eigenvalues and eigenvectors of the covariance matrix
# this is the covariance matrix of the data
covXc = cov(Xc)
# eigenvalues and eigenvectors of the covariance matrix
projections = eigen(covXc)
#eigenvectors
G = projections$vectors
#eigenvalues
lambda = projections$values
G
lambda
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
fracvar = lambda/sum(lambda)
fracvar
covXc
plot(PCs[,1], PCs[,2], col=iris$Species, xlab='PC1', ylab='PC2')
PCs
G
covXc
G[,1]
legend()
help(legend)
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
legend(2)
legend(2, legend=iris$Species)
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
legend(2, legend=iris$Species)
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
legend(4, legend=iris$Species)
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
legend(list(x=7,y=7), legend=iris$Species)
iris$Species
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
n=dim(X)[1]
plot(PCs[,1], rep(0,n), col=iris$Species, xlab='PC1', ylab='', yaxt="n")
legend("topright", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=1)
plot(iris[,1:4], col=c(2,3,4)[iris$Species], main='Iris data')
# Add a legend
legend("topright", legend=levels(iris$Species), col=c(2,3,4), pch=1)
plot(iris[,1:4], col=c(2,3,4)[iris$Species], main='Iris data')
# Add a legend with adjustments
legend("topright", inset=c(-0.1,0), legend=levels(iris$Species), col=c(2,3,4), pch=1, xpd=TRUE)
plot(iris[,1:4], col=c(2,3,4)[iris$Species], main='Iris data')
# Add a legend with adjustments
legend("topright", inset=c(-0.1,0), legend=levels(iris$Species), col=c(2,3,4), pch=1, xpd=TRUE)
cd
getwd()
help(getwd)
list.files()
knitr::opts_chunk$set(echo = TRUE)
path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
setwd(path)
path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
setwd(path)
setwd(path)
list.files()
list.files("project")
list.files("project/data")
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
#setwd(path)
data_path = "project/data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
help(read.csv)
getwd()
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
#setwd(path)
data_path = "/project/data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
#setwd(path)
data_path = "/project/data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2"
#setwd(path)
data_path = "/project/data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
setwd("C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data")
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
list.files()
help(list.files)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv("envDataset_12h_10x10_with_mask.csv")
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_without_mask.csv"
data = read.csv(data_path)
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_withoutt_mask.csv"
data = read.csv(data_path)
list.files
list.files()
list.files()[1]
read.csv(list.files[1])
read.csv(list.files()[1])
# path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
# setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
list.files()
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
#setwd(path)
data_path = "/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
setwd("C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data")
#path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
#setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
getwd()
getwd()
path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
setwd(path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
knitr::opts_chunk$set(echo = TRUE,
root.dir = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/analysis")
list.files()
list.files("..")
list.files("../data")
knitr::opts_chunk$set(echo = TRUE,
root.dir = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/analysis")
summary(cars)
plot(pressure)
path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
setwd(path)
data_path = "../data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
list.files("../data")
data
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/analysis")
summary(cars)
plot(pressure)
path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
setwd(path)
data_path = "../data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
getwd()
getwd()
start.path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/data"
knitr::opts_chunk$set(echo = TRUE, root.dir = start.path)
knitr::opts_knit$set(root.dir = start.path)
summary(cars)
plot(pressure)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
head(data)
getwd()
getwd()
start.path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/analysis"
knitr::opts_chunk$set(echo = TRUE, root.dir = start.path)
knitr::opts_knit$set(root.dir = start.path)
summary(cars)
plot(pressure)
data_path = "../data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
getwd()
getwd()
getwd()
getwd()
library(here)
install.packages('here')
library(here)
#install.packages('here')
library(here)
start.path = "C:/Users/Keith/OneDrive/unimelb masters/2025 sem 1/Data science research project pt1 and 2/project/analysis"
knitr::opts_chunk$set(echo = TRUE, root.dir = start.path)
knitr::opts_knit$set(root.dir = start.path)
getwd()
getwd()
#summary(cars)
#plot(pressure)
here()
#install.packages('here')
library(here)
knitr::opts_chunk$set(echo = TRUE)
here()
#summary(cars)
#plot(pressure)
data_path = "../data/envDataset_12h_10x10_with_mask.csv"
data = read.csv(data_path)
getwd()
getwd()
here()
help(here)
#install.packages('here')
library(here)
knitr::opts_chunk$set(echo = TRUE)
here()
# equivalent to read.csv("../data/data_path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(here("..", "data", data_path))
help(str)
str(data)
#str(data)
#str(data)
data
help(type)
typeof(data)
data
typeof(data)
typeof(data[,1])
typeof(data[,2])
typeof(data[,3])
typeof(data[,1:ncol(data)])
typeof(data[,1])
c(typeof(data[,1]), typeof(data[,2]))
sapply(1:ncol(data), function(i){typeof(data[,i])})
str(data)
data
unique(data[,1])
is.na(data)
sum(is.na(data))
is.na(data[,1])
sum(is.na(data[,1]))
colnames(data)
as.data.frame(
colnames(data), sapply(1:ncol(data), function(i){sum(is.na(data[,i]))})
)
as.data.frame(
c(colnames(data), sapply(1:ncol(data), function(i){sum(is.na(data[,i]))}))
)
length(colnames(data))
length(sapply(1:ncol(data), function(i){sum(is.na(data[,i]))}))
help(as.data.frame)
as.data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i]))})
)
cbind(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i]))})
)
cbind(
colnames(data),
sapply(1:ncol(data), function(i){ as.numeric(sum(is.na(data[,i]))) } )
)
help(cbind)
cbind(1, 1:7)
sapply(1:ncol(data), function(i){as.numeric(is.na(data[,i])) } )
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
cbind(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
help(apply)
help(sapply)
help(apply)
data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } ),
colnames=c("variables", "number of missing vals")
)
help(data.frame)
data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
help(sort)
sort(data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
))
data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
help("order")
order(data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
))
data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
num.na.per.column = data.frame(
colnames(data),
sapply(1:ncol(data), function(i){sum(is.na(data[,i])) } )
)
table(data[,1])
num.na.per.column[order(num.na.per.column$sapply.1.ncol.data...function.i...), ]
num.na.per.column[
order(num.na.per.column[,2]), ]
num.na.per.column[
order(num.na.per.column[,2], decreasing=TRUE), ]
data[,1] == NA
data[,1]
is.na(data[,1])
data[is.na(data[,1]),]
data[is.na(data[,1]), 1]
data[is.na(data[,1]),  ]
is.na("2")
is.na(NA)
sapply(data[,1], function(cat){if(is.na(cat)){"NA"}})
sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}})
length(sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}}))
typeof(sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}}))
grep(NA, data[,1])
sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}})
sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}})[1]
typeof(sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}}))
data[,1] = sapply(data[,1], function(cat){if(is.na(cat)){"NA"}else{cat}})
data
sum(is.na(data))
unique(data[,1])
sum(is.na(data))
unique(data[,1])
data[,1] == "WP"
as.numeric(data[,1] == "WP")
cat("123","--")
cat("123","--",sep='')
head(data)
model.matrix(~0+data$basin)
model.matrix(~0 + data$basin)
help(model.matrix)
as.matrix(data[2:ncol(data)-1])
str(data)
matrix(data[2,ncol(data)-1])
cbind(data, model.matrix(~0 + data$basin))
cbind(data, model.matrix(~0 + data$basin))[,ncol(data):1]
str(cbind(data, model.matrix(~0 + data$basin))[,ncol(data):1])
setdiff(colnames(cbind(data, model.matrix(~0 + data$basin))[,ncol(data):1]), colnames(data))
colnames(data)
colnames(cbind(data, model.matrix(~0 + data$basin))[,ncol(data):1])
cbind(data, model.matrix(~0 + data$basin))
colnames(cbind(data, model.matrix(~0 + data$basin)))
cbind(data, model.matrix(~ 0 + basin, data = data))
colnames(cbind(data, model.matrix(~ 0 + basin, data = data)))
data.encoded = cbind(data, model.matrix(~ 0 + basin, data = data))
data.encoded[,-c("basin")]
data.encoded[,"basin"]
subset(data.encoded, select = -c("basin"))
subset(data.encoded, select = -c(basin))
data.encoded[,-c(basin)]
help(subset)
colnames(data)[1:2]
list(x=2,y=3)
colnames(data)
subset(data.encoded, select = c(TC_genesis))
table(subset(data.encoded, select = c(TC_genesis)))
# equivalent to read.csv("../data/data_path)
data_path = "envDataset_12h_10x10_with_mask.csv"
data = read.csv(here("..", "data", data_path))
# Preprocess the tropical cyclone dataset for model training.
#
# @param dta = the raw data frame from the envData dataset.
#
# @returns a list of 2 elements: the preprocessed data excluding the response, and
# the response
preprocess = function(dta){
# encode missing data from 'basin' as an actual category
#dta$basin = sapply(dta$basin, function(cat){if(is.na(cat)){"NA"}else{cat}})
dta$basin[is.na(dta$basin)] = "NA" # better readability and efficiency
# might be a good idea to keep basin as a factor for modelling purposes!
dta$basin = as.factor(dta$basin)
# encode categories in 'basin' using one hot encoding
dta.encoded = cbind(dta, model.matrix(~ 0 + basin, data = dta))
# get data frame of predictors only: we can remove the original 'basin' column
dta.predictors = subset(dta.encoded, select = -c(basin, TC_genesis))
# get data frame of the response only
dta.response = dta.encoded$TC_genesis
return(list(predictors = dta.predictors,
response = dta.response))
}
preprocess.test = preprocess(data)
preprocess.test$predictors
preprocess.test$response
table(preprocess.test$response)
str(preprocess.test$predictors)
eigen(preprocess.test$predictors)
svd(preprocess.test$predictors)
help(svd)
round(svd(preprocess.test$predictors)$d,5)
table(preprocess.test$response)
help(apply)
apply(preprocess.test$predictors,MARGIN=2, typeof)
unique(apply(preprocess.test$predictors,MARGIN=2, typeof))
